@{
    ViewData["Title"] = "Film";
}
@*Zal altijd op poort 7001 draaien*@
<div id="app">
    <div class="" v-if="isLoading">
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
    </div>

    <div v-else>
        <!-- All films -->
        <div v-if="showAllFilmsSection">
            <button class="btn btn-primary" style="position: absolute;top: 0;right: 0; margin:10px;" v-on:click="showAddForm">Add Film</button>
            <div class="row">
                <div class="card mb-3" style="max-width: 350px; margin:5px;" v-for="film in films">
                    <div class="row no-gutters">
                        <div class="col-md-4">
                            <img :src="film.image" class="card-img" :alt="film.image">
                        </div>
                        <div class="col-md-7">
                            <div class="card-body">
                                    <h5 class="card-title">{{film.title}}</h5>
                                    <p class="card-text">{{film.releaseYear}}</p>
                                    <p class="card-text">{{film.director.name}}</p>
                                    <p class="card-text">{{film.genre.name}}</p>
                                    <button type="button" class="btn btn-light" v-on:click="GetFilmDetails(film)">More info</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Add film -->
        <div v-if="showFilmAddSection">
            <h2>Add new film</h2>
            <div class="form-group">
                <label for="title">Title: </label>
                <input type="text" id="title" v-model="newFilm.title" placeholder="title" class="form-control" />
            </div>

            <div class="form-group">
                <label for="image">Image (Url): </label>
                <input type="url" id="image" v-model="newFilm.image" placeholder="image(url)" class="form-control" />
            </div>

            <div class="form-group">
                <label for="releaseYear">Release Year: </label>
                <input type="number" id="releaseYear" v-model="newFilm.releaseYear" placeholder="Release Year" class="form-control" />
            </div>

            <div class="form-group">
                <label for="director">Director: </label>
                <select v-model="newFilm.directorId" class="form-select">
                    <option v-for="director in directors" v-bind:value="director.id">{{director.name}}</option>
                </select>
            </div>

            <div class="form-group">
                <label for="genre">Genre: </label>
                <select v-model="newFilm.genreId" class="form-select">
                    <option v-for="genre in genres" v-bind:value="genre.id">{{genre.name}}</option>
                </select>
            </div>

            <button type="button" class="btn btn-secondary" v-on:click="showFilms">Cancel</button>
            <button type="button" class="btn btn-primary" v-on:click="saveNewFilm(newFilm)">Save</button>
        </div>
        <!-- Film detail -->
        <div v-if="showFilmDetailSection">
            <div class="row">
                <div class="col-md-4 card" style="height: 525px">
                    <img class="card-img" style="width: auto; height: auto; padding: 5px;" v-bind:src="filmDetail.image" alt="filmDetail.image" />
                </div>
                <div class="col-md-8">
                    <div class="card">
                        <div class="card-body">
                            <h2 class="card-title">{{filmDetail.title}}</h2>
                            <p><b>Jaar van uitgave:</b> {{filmDetail.releaseYear}}</p>
                            <p><b>Genre:</b> {{filmDetail.genre.name}}</p>
                            <p class="mb-1"><b>Regisseur:</b> {{filmDetail.director.name}}</p>
                            <div class="cardButtons">
                                <a class="btn btn-warning" style="margin: 15px 5px 0px 0px;" v-on:click="showEditForm">Edit</a>
                                <a class="btn btn-danger" style="margin: 15px 5px 0px 0px;" v-on:click="deleteFilm(filmDetail)">Delete</a>
                                <a class="btn btn-secondary" style="margin: 15px 5px 0px 0px;" v-on:click="showFilms">Back</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Edit film -->
        <div v-if="showFilmEditSection">
            <h2>Edit <b>{{filmDetail.title}}</b></h2>
            <div class="form-group">
                <label for="title">Title: </label>
                <input type="text" id="title" v-model="filmDetail.title" placeholder="title" class="form-control" />
            </div>

            <div class="form-group">
                <label for="image">Image (Url): </label>
                <input type="url" id="image" v-model="filmDetail.image" placeholder="image(url)" class="form-control" />
            </div>

            <div class="form-group">
                <label for="releaseYear">Release Year: </label>
                <input type="number" id="releaseYear" v-model="filmDetail.releaseYear" placeholder="Release Year" class="form-control" />
            </div>

            <div class="form-group">
                <label for="director">Director: </label>
                <select v-model="filmDetail.director.id" class="form-select">
                    <option v-for="director in directors" v-bind:value="director.id">{{director.name}}</option>
                </select>
            </div>

            <div class="form-group">
                <label for="genre">Genre: </label>
                <select v-model="filmDetail.genre.id" class="form-select">
                    <option v-for="genre in genres" v-bind:value="genre.id">{{genre.name}}</option>
                </select>
            </div>

            <button type="button" class="btn btn-secondary" v-on:click="GetFilmDetails(filmDetail)">Cancel</button>
            <button type="button" class="btn btn-primary" v-on:click="saveEditFilm(filmDetail)">Save</button>
        </div>
    </div>
</div>

@section Scripts{
    <script>
    var app = new Vue({ 
        el: '#app', 
        data: { 
            showAllFilmsSection: false,
            showFilmDetailSection: false,
            showFilmAddSection: false,
            showFilmEditSection: false,
            films: null,
            directors: null,
            genres: null,
            isLoading: true,
            filmDetail: null,
            newFilm: {
                id: "",
                title: "",
                image: "",
                releaseYear: 0,
                directorId: "",
                genreId: "",
            },
        },
        created: function () {
            this.showFilms();
        },
        methods:{
            GetFilms: async function () {
                this.showErrorSection = false;
                let self = this;

                await axios.get(`${baseUrl}films`)
                    .then((response) => {
                    self.films = response.data;
                    })
                    .catch((e) => {
                        this.showErrorSection = true;
                        this.errorMessage = e.message
                    })
                    .finally(() => {
                        this.isLoading = false;
                    });
            },
            GetDirectors: async function () {
                this.showErrorSection = false;
                let self = this;

                await axios.get(`${baseUrl}directors`)
                    .then((response) => {
                    self.directors = response.data;
                    })
                    .catch((e) => {
                        this.showErrorSection = true;
                        this.errorMessage = e.message
                    })
                    .finally(() => {
                        this.isLoading = false;
                    });
            },
            GetGenres: async function () {
                this.showErrorSection = false;
                let self = this;
                await axios.get(`${baseUrl}genres`)
                    .then((response) => {
                    self.genres = response.data;
                    })
                    .catch((e) => {
                        this.showErrorSection = true;
                        this.errorMessage = e.message
                    })
                    .finally(() => {
                        this.isLoading = false;
                    });
            },
            showFilms: async function() {
                    this.isLoading = true;
                    await this.GetFilms();
                    this.showAllFilmsSection= true;
                    this.showFilmDetailSection= false;
                    this.showFilmEditSection = false;
                    this.showFilmAddSection = false;

            },
            GetFilmDetails: async function(film) {
                    this.isLoading = true;
                    await axios.get(`${baseUrl}films/${film.id}`)
                        .then((response) => {
                            this.filmDetail = response.data;
                        })
                        .catch((e) => {
                            this.showErrorSection = true;
                            this.errorMessage = e.message
                        })
                        .finally(() => {
                            this.isLoading = false;
                        });
                    this.showAllFilmsSection = false;
                    this.showFilmDetailSection = true;
                    this.showFilmEditSection = false;
                    this.showFilmAddSection = false;
            },
            createGUID: function() {
                //This function will create a new and unique GUID, is needed when creating a new film
                return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                    return v.toString(16);
                });
            },
            showAddForm: async function() {
                await this.GetDirectors();
                await this.GetGenres();
                this.showAllFilmsSection= false;
                this.showFilmDetailSection= false;
                this.showFilmEditSection = false;
                this.showFilmAddSection = true;
            },
            saveNewFilm: async function(newFilm) {
                this.isLoading = true;
                
                var newGuid= this.createGUID();
                console.log(newGuid);
                var createdFilm = {
                    id: newGuid,
                    title: newFilm.title,
                    image: newFilm.image,
                    releaseYear: newFilm.releaseYear,
                    directorId: newFilm.directorId,
                    genreId: newFilm.genreId
                }
                console.log(createdFilm);

                await axios.post(`${baseUrl}films`, createdFilm)
                    .then((response) => {
                        this.showFilms();
                    })
                    .catch((e) => {
                        this.showErrorSection = true;
                        this.errorMessage = e.message;
                    })
                    .finally(() => {
                        this.isLoading = false;
                    });
            },
            showEditForm: async function() {
                await this.GetDirectors();
                await this.GetGenres();
                this.showAllFilmsSection= false;
                this.showFilmDetailSection= false;
                this.showFilmEditSection = true;
                this.showFilmAddSection = false;
            },
            saveEditFilm: async function (filmDetail){
                this.isLoading = true;

                var editedFilm = {
                    id: filmDetail.id,
                    title: filmDetail.title,
                    image: filmDetail.image,
                    releaseYear: filmDetail.releaseYear,
                    directorId: filmDetail.director.id,
                    genreId: filmDetail.genre.id
                }

                await axios.put(`${baseUrl}films`, editedFilm)
                    .then((response) => {
                        this.showFilms();
                    })
                    .catch((e) => {
                        this.showErrorSection = true;
                        this.errorMessage = e.message;
                    })
                    .finally(() => {
                        this.isLoading = false;
                    });
                this.showAllFilmsSection = true;
                this.showFilmDetailSection = false;
                this.showFilmEditSection = false;
                this.showFilmAddSection = false;
            },
            deleteFilm: async function (filmToDelete) {
                this.isLoading = true;
                let self = this;
                await axios.delete(`${baseUrl}films/${filmToDelete.id}`)
                    .then((response) => {
                        self.films.forEach(function (film, i) {
                            if (film.id === filmToDelete.id) {
                                self.films.splice(i, 1);
                            }
                        });
                    })
                    .catch((e) => {
                        this.showErrorSection = true;
                        this.errorMessage = e.message
                    })
                    .finally(() => {
                        this.isLoading = false;
                    });
                this.showAllFilmsSection = true;
                this.showFilmDetailSection = false;
                this.showFilmEditSection = false;
                this.showFilmAddSection = false;
            }
        },
    });
    </script>
}