@page "/films"
@using Imi.Project.Blazor.Components
@using Imi.Project.Blazor.Models
@using Imi.Project.Blazor.Services.Mocks
@inject ICRUDService<Film> filmService;
@inject ICRUDService<Genre> genreService;
@inject ICRUDService<Director> directorService;

<h3>Films</h3>
<div>
    @if(currentFilm == null)
    { 
        <FilmList Items="films"
                  OnAdd="AddFilm"
                  OnEdit="EditFilm"
                  OnDelete="DeleteFilm">
        </FilmList>
    }
    else
    {
        <FilmForm filmItem="currentFilm"
                  AvailableGenres="availableGenres"
                  AvailableDirectors="availableDirectors"
                  OnSaveClick="SaveFilm"
                  OnCancelClick="RefreshFilms">
        </FilmForm>
    }
</div>

@code {
    private Film[] films;
    private Film currentFilm;
    private Genre[] availableGenres = new Genre[0];
    private Director[] availableDirectors = new Director[0];
    private string error;

    protected override async Task OnInitializedAsync()
    {
        await RefreshFilms();
    }

    public async Task RefreshFilms() 
    { 
        films = (await filmService.GetAll()).ToArray(); 
        this.currentFilm = null; 
    }

    public async void AddFilm()
    {
        this.availableGenres = (await genreService.GetAll()).ToArray();
        this.availableDirectors = (await directorService.GetAll()).ToArray();
        this.currentFilm = new Film();
    }

    public async Task EditFilm(Film item)
    {
        this.availableGenres = (await genreService.GetAll()).ToArray();
        this.availableDirectors = (await directorService.GetAll()).ToArray();
        this.currentFilm = await filmService.Get(item.Id);
    }

    public async Task SaveFilm(Film item)
    {
        try
        {
            if (currentFilm.Id == Guid.Empty)
            {
                await filmService.Create(currentFilm);
            }
            else
            {
                await filmService.Update(currentFilm);
            }
            await this.RefreshFilms();
        }
        catch(Exception ex)
        {
            this.error = ex.Message;
        }
    }

    public async Task DeleteFilm(Film item)
    {
        try
        {
            await filmService.Delete(item.Id);
            await this.RefreshFilms();
        }
        catch (Exception ex)
        {
            this.error = ex.Message;
        }
    }
}